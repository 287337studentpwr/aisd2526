#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

long long COMP = 0; // licznik porównań
long long ASS  = 0; // licznik przypisań elementów (w tym swap=3)

inline int LEFT(int i)  { return 2 * i + 1; }
inline int RIGHT(int i) { return 2 * i + 2; }

namespace vectors_1{
    std::vector<int> A7 = {7, 4, 5, 4, 2, 1, 9};
    // nie posortowana Lista wielkości n=7
    std::vector<int> A15 = {91, 43, 77, 13, 58, 62, 71, 26, 80, 41, 59, 2, 97, 34, 15};
    // nie posortowana Lista wielkości n=15
    std::vector<int> A100 = {864, 394, 776, 911, 430, 41, 265, 988, 523, 497,
                             414, 940, 802, 849, 310, 991, 488, 366, 597, 913,
                             929, 223, 516, 142, 289, 144, 774, 98, 634, 819,
                             257, 544, 961, 822, 437, 112, 82, 896, 340, 139,
                             952, 580, 360, 553, 517, 189, 121, 353, 923, 960,
                             995, 422, 598, 183, 454, 230, 37, 282, 394, 763,
                             89, 567, 912, 531, 604, 153, 293, 286, 105, 893,
                             674, 721, 957, 95, 818, 763, 947, 912, 56, 764,
                             632, 426, 900, 828, 845, 56, 912, 620, 456, 120,
                             259, 43, 699, 278, 684, 711, 265, 814, 694, 732};
    // nie posortowana Lista wielkości n=100
    std::vector<int> A1000 ={864, 394, 776, 911, 430, 41, 265, 988, 523, 497, 414, 940, 802, 849, 310, 991, 488, 366, 597, 913, 929, 223, 516, 142, 289, 144, 774, 98, 634, 819,
                             257, 544, 961, 822, 437, 112, 82, 896, 340, 139, 952, 580, 360, 553, 517, 189, 121, 353, 923, 960, 995, 422, 598, 183, 454, 230, 37, 282, 394, 763,
                             89, 567, 912, 531, 604, 153, 293, 286, 105, 893, 674, 721, 957, 95, 818, 763, 947, 912, 56, 764, 632, 426, 900, 828, 845, 56, 912, 620, 456, 120,
                             259, 43, 699, 278, 684, 711, 265, 814, 694, 732, 462, 1, 750, 745, 629, 567, 212, 936, 110, 561, 77, 785, 947, 546, 738, 998, 955, 542, 163, 702,
                             260, 827, 641, 456, 791, 418, 287, 904, 897, 540, 274, 506, 891, 787, 442, 88, 984, 563, 590, 245, 274, 439, 735, 888, 501, 855, 567, 923, 792, 217,
                             928, 272, 925, 369, 60, 365, 419, 515, 74, 492, 621, 438, 972, 36, 263, 771, 587, 606, 255, 196, 20, 691, 155, 672, 478, 856, 757, 380, 563, 964,
                             136, 260, 815, 945, 776, 197, 482, 212, 904, 213, 230, 701, 549, 372, 39, 516, 153, 545, 819, 292, 51, 180, 525, 279, 912, 436, 479, 985, 941, 641,
                             632, 370, 111, 390, 675, 385, 77, 452, 306, 374, 450, 345, 165, 826, 968, 113, 280, 650, 709, 455, 431, 770, 995, 862, 733, 237, 375, 742, 70, 113,
                             922, 936, 871, 284, 686, 776, 361, 658, 441, 509, 75, 778, 803, 950, 766, 236, 947, 273, 112, 442, 253, 326, 479, 160, 710, 233, 761, 953, 331, 610,
                             463, 386, 67, 761, 957, 934, 500, 588, 542, 633, 111, 950, 989, 232, 458, 474, 875, 764, 396, 213, 604, 355, 961, 481, 991, 510, 764, 637, 255, 812,
                             138, 964, 338, 711, 497, 879, 604, 937, 594, 828, 495, 671, 394, 343, 918, 312, 966, 429, 616, 833, 468, 424, 620, 203, 667, 44, 806, 162, 911, 712,
                             951, 365, 357, 1, 92, 850, 218, 710, 214, 797, 803, 671, 265, 264, 857, 214, 264, 998, 33, 103, 792, 361, 182, 849, 16, 241, 753, 856, 81, 764,
                             427, 737, 518, 315, 664, 894, 174, 340, 721, 492, 605, 96, 23, 463, 600, 966, 625, 844, 302, 771, 529, 152, 445, 321, 346, 628, 916, 93, 400, 158,
                             7, 458, 938, 902, 773, 677, 945, 620, 346, 833, 132, 529, 785, 139, 444, 484, 446, 441, 753, 453, 720, 891, 64, 195, 939, 581, 227, 244, 822, 990,
                             145, 822, 556, 458, 93, 82, 327, 896, 520, 955, 501, 111, 308, 564, 298, 723, 190, 982, 655, 533, 601, 669, 553, 895, 45, 99, 350, 708, 20, 335,
                             382, 380, 33, 866, 718, 463, 517, 299, 376, 920, 380, 94, 981, 874, 306, 967, 607, 438, 350, 110, 142, 29, 815, 541, 439, 275, 524, 554, 593, 947,
                             271, 243, 379, 767, 34, 67, 923, 995, 382, 164, 957, 519, 150, 310, 327, 26, 547, 846, 232, 652, 40, 879, 995, 36, 263, 771, 587, 606, 255, 196,
                             20, 691, 155, 672, 478, 856, 757, 380, 563, 964, 136, 260, 815, 945, 776, 197, 482, 212, 904, 213, 230, 701, 549, 372, 39, 516, 153, 545, 819, 292,
                             51, 180, 525, 279, 912, 436, 479, 985, 941, 641, 632, 370, 111, 390, 675, 385, 77, 452, 306, 374, 450, 345, 165, 826, 968, 113, 280, 650, 709, 455,
                             431, 770, 995, 862, 733, 237, 375, 742, 70, 113, 922, 936, 871, 284, 686, 776, 361, 658, 441, 509, 75, 778, 803, 950, 766, 236, 947, 273, 112, 442,
                             253, 326, 479, 160, 710, 233, 761, 953, 331, 610, 463, 386, 67, 761, 957, 934, 500, 588, 542, 633, 111, 950, 989, 232, 458, 474, 875, 764, 396, 213,
                             604, 355, 961, 481, 991, 510, 764, 637, 255, 812, 138, 964, 338, 711, 497, 879, 604, 937, 594, 828, 495, 671, 394, 343, 918, 312, 966, 429, 616, 833,
                             468, 424, 620, 203, 667, 44, 806, 162, 911, 712, 951, 365, 357, 1, 92, 850, 218, 710, 214, 797, 803, 671, 265, 264, 857, 214, 264, 998, 33, 103};  
// nie posortowana Lista wielkości n=1000
}

void PRINT_VECTOR(std::vector<int>& A){
    for (int x : A) std::cout << x << " ";
    std::cout <<'\n';
}

void HEAPIFY(std::vector<int>& A, int i, int heap_size){
    int l = LEFT(i);
    int r = RIGHT(i);

    int largest = i;

    if (l < heap_size) {
        ++COMP;                         
        if (A[l] > A[largest]) largest = l;
    }

    if (r < heap_size) {
        ++COMP;                         
        if (A[r] > A[largest]) largest = r;
    }

    if (i != largest) {
        std::swap(A[i], A[largest]);
        ASS += 3;                       
        HEAPIFY(A, largest, heap_size);
    }
}

void BUILD_HEAP(std::vector<int>& A){
    int heap_size = (int)A.size();
    for (int i = (heap_size / 2) - 1; i >= 0; --i) {
        HEAPIFY(A, i, heap_size);
    }
}

void HEAP_SORT(std::vector<int>& A){
    BUILD_HEAP(A);
    int heap_size = (int)A.size();
    for (int i = heap_size - 1; i >= 1; --i) {
        std::swap(A[0], A[i]);
        ASS += 3;
        --heap_size;
        HEAPIFY(A, 0, heap_size);
    }
}

int main() {
    using namespace vectors_1;

    //HEAP_SORT(A7);
    //PRINT_VECTOR(A7);

    //HEAP_SORT(A15);
    //PRINT_VECTOR(A15);

    HEAP_SORT(A100);
    PRINT_VECTOR(A100);

    //HEAP_SORT(A1000);
    //PRINT_VECTOR(A1000);

    std::cout << "\nCOMP = " << COMP << "\nASS  = " << ASS << "\n";
    return 0;
}
